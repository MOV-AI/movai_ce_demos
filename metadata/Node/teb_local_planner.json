{
    "Node": {
        "teb_local_planner": {
            "Info": "Implements an online optimal local trajectory planner for navigation and control of mobile robots as a plugin for the ROS navigation package.\n\nDocumentation: http://wiki.ros.org/teb_local_planner",
            "Label": "teb_local_planner",
            "LastUpdate": {
                "date": "29/11/2021 at 19:37:56",
                "user": "movai"
            },
            "Launch": true,
            "PackageDepends": "",
            "Parameter": {
                "acc_lim_theta": {
                    "Description": "Maximum angular acceleration of the robot in (radi/s^2)",
                    "Type": "any",
                    "Value": "0.1"
                },
                "acc_lim_x": {
                    "Description": "Maximum translational acceleration of the robot (m/s^2)\n",
                    "Type": "any",
                    "Value": "0.5"
                },
                "acc_lim_y": {
                    "Description": "Maximum strafing acceleration of the robot\n",
                    "Type": "number",
                    "Value": "0.5"
                },
                "allow_init_with_backwards_motion": {
                    "Description": "If true, underlying trajectories might be initialized with backwards motions in case the goal is behind the start within the local costmap (this is only recommended if the robot is equipped with rear sensors).",
                    "Type": "boolean",
                    "Value": "False"
                },
                "cmd_angle_instead_rotvel": {
                    "Description": "Substitute the rotational velocity in the commanded velocity message by the corresponding steering angle [-pi/2,pi/2].",
                    "Type": "any",
                    "Value": "False"
                },
                "costmap_converter_plugin": {
                    "Description": "Define plugin name in order to convert costmap cells to points/lines/polygons. Set an empty string to disable the conversion such that all cells are treated as point-obstacles.",
                    "Type": "string",
                    "Value": ""
                },
                "costmap_converter_rate": {
                    "Description": "Rate that defines how often the costmap_converter plugin processes the current costmap (the value should not be much higher than the costmap update rate) [Hz].",
                    "Type": "number",
                    "Value": "5"
                },
                "costmap_converter_spin_thread": {
                    "Description": "If set to true, the costmap converter invokes its callback queue in a different thread.",
                    "Type": "boolean",
                    "Value": "True"
                },
                "costmap_obstacles_behind_robot_dist": {
                    "Description": "Limit the occupied local costmap obstacles taken into account for planning behind the robot [m].",
                    "Type": "number",
                    "Value": "1.0"
                },
                "dt_hysteresis": {
                    "Description": "Hysteresis for automatic resizing depending on the current temporal resolution, usually approx. 10% of dt_ref is recommended",
                    "Type": "number",
                    "Value": "0.1"
                },
                "dt_ref": {
                    "Description": "Desired temporal resolution of the trajectory (the trajectory is not fixed to dt_ref since the temporal resolution is part of the optimization, but the trajectory will be resized between iterations if dt_ref +-dt_hysteresis is violated.",
                    "Type": "number",
                    "Value": "0.3"
                },
                "enable_homotopy_class_planning": {
                    "Description": "Activate parallel planning in distinctive topologies (requires much more CPU resources, since multiple trajectories are optimized at once)",
                    "Type": "boolean",
                    "Value": "True"
                },
                "enable_multithreading": {
                    "Description": "Activate multiple threading in order to plan each trajectory in a different thread",
                    "Type": "boolean",
                    "Value": "True"
                },
                "exact_arc_length": {
                    "Description": "If true, the planner uses the exact arc length in velocity, acceleration and turning rate computations (-> increased cpu time), otherwise the Euclidean approximation is used.\n",
                    "Type": "boolean",
                    "Value": "True"
                },
                "feasibility_check_no_poses": {
                    "Description": "Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval.",
                    "Type": "number",
                    "Value": "4"
                },
                "footprint_model": {
                    "Description": "type: Specify the robot footprint model type used for optimization. Different types are \"point\", \"circular\", \"line\", \"two_circles\" and \"polygon.\" The type of the model significantly influences the required computation time.\nradius: This parameter is only relevant for type \"circular\". It contains the radius of the circle. The center of the circle is located at the robot's axis of rotation.",
                    "Type": "any",
                    "Value": "{\"type\":\"circular\",\"radius\":0.2}"
                },
                "force_reinit_new_goal_dist": {
                    "Description": "Reinitialize the trajectory if a previous goal is updated with a separation of more than the specified value in meters (skip hot-starting)\n",
                    "Type": "number",
                    "Value": "1.0"
                },
                "free_goal_vel": {
                    "Description": "Remove the goal velocity constraint such that the robot can arrive at the goal with maximum speed",
                    "Type": "boolean",
                    "Value": "False"
                },
                "global_plan_overwrite_orientation": {
                    "Description": "Overwrite orientation of local subgoals provided by the global planner (since they often provide only a 2D path)",
                    "Type": "boolean",
                    "Value": "True"
                },
                "global_plan_viapoint_sep": {
                    "Description": "If positive, via-points are extrected from the global plan (path-following mode). The value determines the resolution of the reference path (min. separation [m] between each two consecutive via-points along the global plan, if negative: disabled). Refer to parameter weight_viapoint for adjusting the intensity.",
                    "Type": "number",
                    "Value": "-0.1"
                },
                "h_signature_prescaler": {
                    "Description": "Scale internal parameter (H-signature) that is used to distinguish between homotopy classes. Warning: reduce this parameter only, if you observe problems with too many obstacles in the local cost map, do not choose it extremly low, otherwise obstacles cannot be distinguished from each other (0.2<value<=1).",
                    "Type": "number",
                    "Value": "1"
                },
                "h_signature_threshold": {
                    "Description": "Two H-signatures are assumed to be equal, if both the difference of real parts and complex parts are below the specified threshold.",
                    "Type": "number",
                    "Value": "0.1"
                },
                "include_costmap_obstacles": {
                    "Description": "Specify if obstacles of the local costmap should be taken into account. Each cell that is marked as obstacle is considered as a point-obstacle. Therefore do not choose a very small resolution of the costmap since it increases computation time. In future releases this circumstance is going to be addressed as well as providing an additional api for dynamic obstacles.",
                    "Type": "boolean",
                    "Value": "True"
                },
                "include_dynamic_obstacles": {
                    "Description": "If this parameter is set to true, the motion of obstacles with non-zero velocity (provided via user-supplied obstacles on topic ~/obstacles or obtained from the costmap_converter) is predicted and considered during optimization via a constant velocity model. New\n",
                    "Type": "boolean",
                    "Value": "False"
                },
                "inflation_dist": {
                    "Description": "Buffer zone around obstacles with non-zero penalty costs [m] (should be larger than min_obstacle_dist in order to take effect). Also refer to the weight weight_inflation.",
                    "Type": "number",
                    "Value": "0.6"
                },
                "is_footprint_dynamic": {
                    "Description": "If true, updates the footprint before checking trajectory feasibility\n",
                    "Type": "boolean",
                    "Value": "False"
                },
                "legacy_obstacle_association": {
                    "Description": "The strategy of connecting trajectory poses with obstacles for optimization has been modified (see changelog). You can switch to the old/previous strategy by setting this parameter to true. Old strategy: for each obstacle, find the nearest TEB pose; new strategy: for each teb pose, find only \"relevant\" obstacles.\n",
                    "Type": "boolean",
                    "Value": "False"
                },
                "map_frame": {
                    "Description": "Global planning frame (in case of a static map, this parameter must be usually changed to \"/map\".",
                    "Type": "any",
                    "Value": "/map"
                },
                "max_global_plan_lookahead_dist": {
                    "Description": "Specify the maximum length [m] (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization. The actual length is than determined by the logical conjunction of the local costmap size and this maximum bound. Set to zero or negative in order to deactivate this limitation.",
                    "Type": "number",
                    "Value": "3"
                },
                "max_number_classes": {
                    "Description": "Specify the maximum number of distinctive trajectories taken into account (limits computational effort)",
                    "Type": "number",
                    "Value": "4"
                },
                "max_vel_theta": {
                    "Description": "Maximum angular velocity of the robot in (rad/s)\n",
                    "Type": "any",
                    "Value": "0.3"
                },
                "max_vel_x": {
                    "Description": "Maximum translational velocity of the robot [m/s]",
                    "Type": "any",
                    "Value": "0.4"
                },
                "max_vel_x_backwards": {
                    "Description": "Maximum absolute translational velocity of the robot while driving backwards [m/s]. See optimization parameter weight_kinematics_forward_drive",
                    "Type": "any",
                    "Value": "0.2"
                },
                "max_vel_y": {
                    "Description": "Maximum strafing velocity of the robot (should be zero for non-holonomic robots!)\n",
                    "Type": "number",
                    "Value": "0.0"
                },
                "min_obstacle_dist": {
                    "Description": "Minimum desired separation from obstacles in meters\n",
                    "Type": "number",
                    "Value": "0.5"
                },
                "min_samples": {
                    "Description": "Minimum number of samples (should be always greater than 2)\n",
                    "Type": "number",
                    "Value": "3"
                },
                "min_turning_radius": {
                    "Description": "Minimum turning radius [m] of a carlike robot (set to zero for a diff-drive robot).",
                    "Type": "any",
                    "Value": "0.0"
                },
                "no_inner_iterations": {
                    "Description": "Number of actual solver iterations called in each outerloop iteration. See param no_outer_iterations.",
                    "Type": "number",
                    "Value": "5"
                },
                "no_outer_iterations": {
                    "Description": "Each outerloop iteration automatically resizes the trajectory according to the desired temporal resolution dt_ref and invokes the internal optimizer (that performs no_inner_iterations). The total number of solver iterations in each planning cycle is therefore the product of both values.",
                    "Type": "number",
                    "Value": "4"
                },
                "obstacle_association_cutoff_factor": {
                    "Description": "See obstacle_association_force_inclusion_factor, but beyond a multiple of [value]*min_obstacle_dist all obstacles are ignored during optimization. Parameter obstacle_association_force_inclusion_factor is processed first. [This parameter is used only if parameter legacy_obstacle_association is false]\n",
                    "Type": "number",
                    "Value": "5"
                },
                "obstacle_association_force_inclusion_factor": {
                    "Description": "The non-legacy obstacle association strategy tries to connect only relevant obstacles with the discretized trajectory during optimization. But all obstacles within a specifed distance are forced to be included (as a multiple of min_obstacle_dist). E.g. choose 2.0 in order toenforce the consideration obstacles within a radius of 2.0*min_obstacle_dist. [This parameter is used only if parameter legacy_obstacle_association is false]\n",
                    "Type": "number",
                    "Value": "1.5"
                },
                "obstacle_heading_threshold": {
                    "Description": "Specify the value of the scalar product between obstacle heading and goal heading in order to take them (obstacles) into account for exploration.",
                    "Type": "number",
                    "Value": "1"
                },
                "obstacle_poses_affected": {
                    "Description": "Each obstacle position is attached to the closest pose on the trajectory in order to keep a distance. Additional neighbors can be taken into account as well. Note, this parameter might be removed in future versions, since the the obstacle association strategy has been modified in kinetic+. Refer to the parameter description of legacy_obstacle_association.",
                    "Type": "number",
                    "Value": "30"
                },
                "odom_topic": {
                    "Description": "Topic name of the odometry message, provided by the robot driver or simulator.",
                    "Type": "any",
                    "Value": "/wheels_controller/odom"
                },
                "optimization_activate": {
                    "Description": "Activate the optimization.",
                    "Type": "any",
                    "Value": "True"
                },
                "optimization_verbose": {
                    "Description": "Print verbose information.",
                    "Type": "any",
                    "Value": "False"
                },
                "oscillation_recovery": {
                    "Description": "Try to detect and resolve oscillations between multiple solutions in the same equivalence class (robot frequently switches between left/right/forward/backwards)",
                    "Type": "any",
                    "Value": "True"
                },
                "penalty_epsilon": {
                    "Description": "Add a small safety margin to penalty functions for hard-constraint approximations",
                    "Type": "number",
                    "Value": "0.1"
                },
                "publish_feedback": {
                    "Description": "Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging). See list of publishers above.",
                    "Type": "boolean",
                    "Value": "False"
                },
                "roadmap_graph_area_width": {
                    "Description": "Random keypoints/waypoints are sampled in a rectangular region between start and goal. Width of that region [m].",
                    "Type": "number",
                    "Value": "6.0"
                },
                "roadmap_graph_no_samples": {
                    "Description": "Specify the number of samples generated for creating the roadmap graph",
                    "Type": "number",
                    "Value": "15"
                },
                "selection_alternative_time_cost": {
                    "Description": "If true, time cost (sum of squared time differences) is replaced by the total transition time (sum of time differences).",
                    "Type": "boolean",
                    "Value": "False"
                },
                "selection_cost_hysteresis": {
                    "Description": "Specify how much trajectory cost must a new candidate have w.r.t. a previously selected trajectory in order to be selected (selection if new_cost < old_cost*factor).\n",
                    "Type": "number",
                    "Value": "1.0"
                },
                "selection_obst_cost_scale": {
                    "Description": "Extra scaling of obstacle cost terms just for selecting the 'best' candidate.\n",
                    "Type": "number",
                    "Value": "100"
                },
                "selection_viapoint_cost_scale": {
                    "Description": "Extra scaling of via-point cost terms just for selecting the 'best' candidate.",
                    "Type": "number",
                    "Value": "1"
                },
                "shrink_horizon_backup": {
                    "Description": "Allows the planner to shrink the horizon temporary (50%) in case of automatically detected issues (e.g. infeasibility). Also see parameter shrink_horizon_min_duration.\n\n",
                    "Type": "boolean",
                    "Value": "True"
                },
                "shrink_horizon_min_duration": {
                    "Description": "Specify minimum duration for the reduced horizon in case an infeasible trajectory is detected (refer to parameter shrink_horizon_backup in order to activate the reduced horizon mode).\n",
                    "Type": "number",
                    "Value": "10.0"
                },
                "switching_blocking_period": {
                    "Description": "Specify a time duration in seconds that needs to be expired before a switch to a new equivalence class is allowed.\n",
                    "Type": "number",
                    "Value": "0.0"
                },
                "teb_autosize": {
                    "Description": "Enable automatic resizing of the trajectory w.r.t to the temporal resolution (recommended)",
                    "Type": "any",
                    "Value": "True"
                },
                "viapoints_all_candidates": {
                    "Description": "If true, all trajectories of different topologies are attached to the set of via-points, otherwise only the trajectory sharing the same topology as the initial/global plan is connected with them",
                    "Type": "boolean",
                    "Value": "True"
                },
                "visualize_hc_graph": {
                    "Description": "Visualize the graph that is created for exploring distinctive trajectories (check marker message in rviz)",
                    "Type": "boolean",
                    "Value": "False"
                },
                "weight_acc_lim_theta": {
                    "Description": "Optimization weight for satisfying the maximum allowed angular acceleration.",
                    "Type": "number",
                    "Value": "1.0"
                },
                "weight_acc_lim_x": {
                    "Description": "Optimization weight for satisfying the maximum allowed translational acceleration",
                    "Type": "number",
                    "Value": "1.0"
                },
                "weight_adapt_factor": {
                    "Description": "Some special weights (currently weight_obstacle) are repeatedly scaled by this factor in each outer TEB iteration (weight_new = weight_old*factor). Increasing weights iteratively instead of setting a huge value a-priori leads to better numerical conditions of the underlying optimization problem.\n",
                    "Type": "number",
                    "Value": "2.0"
                },
                "weight_dynamic_obstacle": {
                    "Description": "Optimization weight for satisfying a minimum separation from dynamic obstacles.",
                    "Type": "any",
                    "Value": "1"
                },
                "weight_inflation": {
                    "Description": "Optimization weight for the inflation penalty (should be small).",
                    "Type": "number",
                    "Value": "0.1"
                },
                "weight_kinematics_forward_drive": {
                    "Description": "Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities). A small weight (e.g. 1.0) still allows driving backwards. A value around 1000 almost prevents backward driving (but cannot be guaranteed).",
                    "Type": "number",
                    "Value": "1.0"
                },
                "weight_kinematics_nh": {
                    "Description": "Optimization weight for satisfying the non-holonomic kinematics (this parameter must be high since the kinematics equation constitutes an equality constraint, even a value of 1000 does not imply a bad matrix condition due to small 'raw' cost values in comparison to other costs).",
                    "Type": "number",
                    "Value": "1.0"
                },
                "weight_kinematics_turning_radius": {
                    "Description": "Optimization weight for enforcing a minimum turning radius (only for carlike robots).",
                    "Type": "number",
                    "Value": "1.0"
                },
                "weight_max_vel_theta": {
                    "Description": "Optimization weight for satisfying the maximum allowed angular velocity",
                    "Type": "number",
                    "Value": "1.0"
                },
                "weight_max_vel_x": {
                    "Description": "Optimization weight for satisfying the maximum allowed translational velocity",
                    "Type": "number",
                    "Value": "2"
                },
                "weight_obstacle": {
                    "Description": "Optimization weight for keeping a minimum distance from obstacles",
                    "Type": "number",
                    "Value": "50"
                },
                "weight_optimaltime": {
                    "Description": "Optimization weight for contracting the trajectory w.r.t transition/execution time",
                    "Type": "number",
                    "Value": "1"
                },
                "weight_shortest_path": {
                    "Description": "Optimization weight for contracting the trajectory w.r.t. path length",
                    "Type": "any",
                    "Value": "0"
                },
                "weight_viapoint": {
                    "Description": "Optimization weight for minimzing the distance to via-points (resp. reference path).",
                    "Type": "number",
                    "Value": "1.0"
                },
                "wheelbase": {
                    "Description": "The distance between the rear axle and the front axle. The value might be negative for back-wheeled robots (only required if ~<name>/cmd_angle_instead_rotvelis set to true)",
                    "Type": "number",
                    "Value": "1.0"
                },
                "xy_goal_tolerance": {
                    "Description": "Allowed final euclidean distance to the goal position in meters\n",
                    "Type": "any",
                    "Value": "0.2"
                },
                "yaw_goal_tolerance": {
                    "Description": "Allowed final orientation error in radians\n",
                    "Type": "any",
                    "Value": "0.2"
                }
            },
            "Path": "TebLocalPlannerROS",
            "Persistent": false,
            "PortsInst": {
                "plugin": {
                    "Message": "Plugin",
                    "Out": {
                        "out": {
                            "Message": "movai_msgs/Plugin"
                        }
                    },
                    "Package": "movai_msgs",
                    "Template": "ROS1/PluginClient"
                }
            },
            "Remappable": true,
            "Type": "ROS1/Plugin",
            "User": "",
            "Version": "",
            "VersionDelta": {}
        }
    }
}